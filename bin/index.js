"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const typedArrayToNodeBuffer = require("typedarray-to-buffer");
const isNode = require('is-node');
const blob2buffer = require('blob-to-buffer');
/**
 * 将Blob转换为node Buffer
 */
function blobToNodeBuffer(data) {
    return new Promise((resolve, reject) => {
        blob2buffer(data, function (err, buffer) {
            err ? reject(err) : resolve(buffer);
        });
    });
}
exports.blobToNodeBuffer = blobToNodeBuffer;
/**
 * 是不是node Buffer
 */
exports.isNodeBuffer = require('is-buffer');
/**
 * node Buffer转Arraybuffer
 */
exports.nodeBufferToArraybuffer = require('to-arraybuffer');
/**
 * node Buffer
 */
exports.NodeBuffer = isNode ? Buffer : require('buffer/').Buffer;
/**
 * 序列化标记，标记一个Buffer是object2buffer序列化的结果
 */
exports._serializeMark = exports.NodeBuffer.from('+o2b`');
/**
 * 对数据进行序列化。
 * 二进制数据格式： 元素类型 -> [元素长度] -> 元素内容
 */
function serialize(data) {
    const bufferItems = [exports._serializeMark];
    for (let item of data)
        switch (Object.prototype.toString.call(item)) {
            case '[object Number]': {
                const type = exports.NodeBuffer.alloc(1);
                const content = exports.NodeBuffer.alloc(8);
                type.writeUInt8(0 /* number */, 0);
                content.writeDoubleBE(item, 0);
                bufferItems.push(type, content);
                break;
            }
            case '[object String]': {
                const type = exports.NodeBuffer.alloc(1);
                const content = exports.NodeBuffer.from(item);
                const contentLength = exports.NodeBuffer.alloc(8);
                type.writeUInt8(1 /* string */, 0);
                contentLength.writeDoubleBE(content.length, 0);
                bufferItems.push(type, contentLength, content);
                break;
            }
            case '[object Boolean]': {
                const type = exports.NodeBuffer.alloc(1);
                const content = exports.NodeBuffer.alloc(1);
                type.writeUInt8(2 /* boolean */, 0);
                content.writeUInt8(item ? 1 : 0, 0);
                bufferItems.push(type, content);
                break;
            }
            case '[object Null]': {
                const type = exports.NodeBuffer.alloc(1);
                type.writeUInt8(3 /* null */, 0);
                bufferItems.push(type);
                break;
            }
            case '[object Undefined]': {
                const type = exports.NodeBuffer.alloc(1);
                type.writeUInt8(4 /* undefined */, 0);
                bufferItems.push(type);
                break;
            }
            case '[object Date]': {
                const type = exports.NodeBuffer.alloc(1);
                const content = exports.NodeBuffer.alloc(8);
                type.writeUInt8(5 /* Date */, 0);
                content.writeDoubleBE(item.getTime(), 0);
                bufferItems.push(type, content);
                break;
            }
            case '[object RegExp]': {
                const type = exports.NodeBuffer.alloc(1);
                const source = item.source; //正则匹配模式 
                const flags = item.flags;
                const sourceContent = exports.NodeBuffer.from(source);
                const sourceContentLength = exports.NodeBuffer.alloc(8);
                const flagsContent = exports.NodeBuffer.from(flags);
                const flagsContentLength = exports.NodeBuffer.alloc(8);
                type.writeUInt8(6 /* RegExp */, 0);
                sourceContentLength.writeDoubleBE(sourceContent.length, 0);
                flagsContentLength.writeDoubleBE(flagsContent.length, 0);
                bufferItems.push(type, sourceContentLength, sourceContent, flagsContentLength, flagsContent);
                break;
            }
            case '[object Array]': {
                const type = exports.NodeBuffer.alloc(1);
                const content = serialize(item);
                const contentLength = exports.NodeBuffer.alloc(8);
                type.writeUInt8(7 /* Array */, 0);
                contentLength.writeDoubleBE(content.length, 0);
                bufferItems.push(type, contentLength, content);
                break;
            }
            case '[object Object]': {
                const keys = Object.keys(item);
                const values = keys.map(key => item[key]);
                const type = exports.NodeBuffer.alloc(1);
                const content = serialize([keys, values]);
                const contentLength = exports.NodeBuffer.alloc(8);
                type.writeUInt8(8 /* Object */, 0);
                contentLength.writeDoubleBE(content.length, 0);
                bufferItems.push(type, contentLength, content);
                break;
            }
            case exports.isNodeBuffer(item): {
                const type = exports.NodeBuffer.alloc(1);
                const content = item;
                const contentLength = exports.NodeBuffer.alloc(8);
                type.writeUInt8(9 /* Buffer */, 0);
                contentLength.writeDoubleBE(content.length, 0);
                bufferItems.push(type, contentLength, content);
                break;
            }
            case '[object DataView]': {
                item = item.buffer;
            }
            case '[object ArrayBuffer]':
            case '[object Int8Array]':
            case '[object Int16Array]':
            case '[object Int32Array]':
            case '[object Uint8Array]':
            case '[object Uint8ClampedArray]':
            case '[object Uint16Array]':
            case '[object Uint32Array]':
            case '[object Float32Array]':
            case '[object Float64Array]': {
                const type = exports.NodeBuffer.alloc(1);
                const content = typedArrayToNodeBuffer(item);
                const contentLength = exports.NodeBuffer.alloc(8);
                type.writeUInt8(9 /* Buffer */, 0);
                contentLength.writeDoubleBE(content.length, 0);
                bufferItems.push(type, contentLength, content);
                break;
            }
            default: {
                const type = exports.NodeBuffer.alloc(1);
                type.writeUInt8(10 /* unknow */, 0);
                bufferItems.push(type);
                break;
            }
        }
    return exports.NodeBuffer.concat(bufferItems);
}
exports.serialize = serialize;
/**
 * 对数据进行反序列化。
 * 注意：传入的Buffer需是使用是object2buffer序列化产生的
 */
function deserialize(data) {
    let previous = 0;
    if (!data.slice(0, previous += exports._serializeMark.length).equals(exports._serializeMark))
        throw new Error('传入的Buffer并不是由object2buffer序列化产生的，无法进行反序列化');
    const result = [];
    while (previous < data.length) {
        const type = data.readUInt8(previous++);
        switch (type) {
            case 0 /* number */: {
                result.push(data.readDoubleBE(previous));
                previous += 8;
                break;
            }
            case 1 /* string */: {
                const length = data.readDoubleBE(previous);
                previous += 8;
                const content = data.slice(previous, previous += length);
                result.push(content.toString());
                break;
            }
            case 2 /* boolean */: {
                const content = data.readUInt8(previous++);
                result.push(content === 1);
                break;
            }
            case 3 /* null */: {
                result.push(null);
                break;
            }
            case 4 /* undefined */: {
                result.push(undefined);
                break;
            }
            case 5 /* Date */: {
                const time = data.readDoubleBE(previous);
                previous += 8;
                result.push(new Date(time));
                break;
            }
            case 6 /* RegExp */: {
                const sourceContentLength = data.readDoubleBE(previous);
                previous += 8;
                const sourceContent = data.slice(previous, previous += sourceContentLength);
                const flagsContentLength = data.readDoubleBE(previous);
                previous += 8;
                const flagsContent = data.slice(previous, previous += flagsContentLength);
                result.push(new RegExp(sourceContent.toString(), flagsContent.toString()));
                break;
            }
            case 7 /* Array */: {
                const length = data.readDoubleBE(previous);
                previous += 8;
                const content = data.slice(previous, previous += length);
                result.push(deserialize(content));
                break;
            }
            case 8 /* Object */: {
                const length = data.readDoubleBE(previous);
                previous += 8;
                const content = data.slice(previous, previous += length);
                const [keys, values] = deserialize(content);
                const obj = {};
                for (var i = 0; i < keys.length; i++) {
                    obj[keys[i]] = values[i];
                }
                result.push(obj);
                break;
            }
            case 9 /* Buffer */: {
                const length = data.readDoubleBE(previous);
                previous += 8;
                result.push(data.slice(previous, previous += length));
                break;
            }
            case 10 /* unknow */: {
                result.push(undefined);
                break;
            }
            default: {
                throw new Error('要被反序列化的数据类型不存在，类型为: ' + type);
            }
        }
    }
    return result;
}
exports.deserialize = deserialize;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
